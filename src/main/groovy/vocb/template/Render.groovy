/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package vocb.template

import groovy.text.GStringTemplateEngine
import vocb.ConfHelper
import vocb.Helper

/**
 * @author premik
 *
 */
class Render {


	GStringTemplateEngine templEngine = new GStringTemplateEngine()

	ConfHelper cfgHelper = ConfHelper.instance
	@Lazy ConfigObject cfg = cfgHelper.cfg
	ConfigObject renderCfg
	Map<String, Boolean> templateVisibility = [:].withDefault {true}


	public Map getTemplBinding() {
		[cfg:cfg, render: this, templates:this.templates, v:renderCfg.vars]
	}

	public ConfigObject getTemplates() {
		renderCfg?.templates
	}


	public String expandTemplate(Object templRes, boolean expandAnkiInterpolations=false) {
		if (!templRes) return ""
		String templResName = templRes as String
		if (!templateVisibility[templResName]) {
			return ""
		}
		String templText = cfgHelper.resolveRes(templResName)?.text
		if (!templText) throw new FileNotFoundException("Failed to find the requested template '$templResName'", cfgHelper.lookupFolders as String)
		if (expandAnkiInterpolations)
			templText = Helper.ankiInterpoaltion2GString(templText)
		

		Writable templ = templEngine.createTemplate(templText).make(templBinding)
		templ.toString()
	}
	
	public String render(Map renderCfg) {
		assert renderCfg
		this.renderCfg = renderCfg				
		assert templates?.main
		
		String mainTemplate = templates.main
		
		expandTemplate(mainTemplate)
	}

	public String render(String renderConfigName) {
		renderCfg = cfg.render[renderConfigName]
		assert renderCfg : "render.$renderConfigName cont found in config"
		return render(renderCfg)
	}

	public File renderToFile(String renderConfigName, File path) {
		assert renderConfigName
		File f = new File(path, "${renderConfigName}.html")
		println "Rendering $renderConfigName to $f"
		f.parentFile.mkdirs()
		f.write(render(renderConfigName))
		return f
	}
	
	public void preview(File p) {
		Map toRender = cfg.render
		//toRender = toRender.findAll {String k, v-> k =="card2Preview"}
		//toRender = toRender.findAll {String k, v-> k =="cardBackPreview"}
		toRender.each { String name, Map r ->
			File outF = renderToFile(name, p)
			if (r.runWith) {
				Process proc = [r.runWith, outF.absolutePath].execute()
				Helper.printProcOut(proc, 2)
			}
			//ssml
		}
	}
	
	
	

	static void main(String... args) {
		 
		new Render().with {
			preview(new File("/tmp/work/template"))
		}
		
		println "Done"
	}
}
